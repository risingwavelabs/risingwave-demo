// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     avro.json
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type TweetData struct {
	Id string `json:"id"`

	Text string `json:"text"`

	Lang string `json:"lang"`

	Created_at string `json:"created_at"`
}

const TweetDataAvroCRC64Fingerprint = "\x12\x19\xae\xc7\xcc\xf6C\x7f"

func NewTweetData() TweetData {
	r := TweetData{}
	return r
}

func DeserializeTweetData(r io.Reader) (TweetData, error) {
	t := NewTweetData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTweetDataFromSchema(r io.Reader, schema string) (TweetData, error) {
	t := NewTweetData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTweetData(r TweetData, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Text, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lang, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Created_at, w)
	if err != nil {
		return err
	}
	return err
}

func (r TweetData) Serialize(w io.Writer) error {
	return writeTweetData(r, w)
}

func (r TweetData) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"lang\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":\"string\"}],\"name\":\"TweetData\",\"type\":\"record\"}"
}

func (r TweetData) SchemaName() string {
	return "TweetData"
}

func (_ TweetData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TweetData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TweetData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TweetData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TweetData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TweetData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TweetData) SetString(v string)   { panic("Unsupported operation") }
func (_ TweetData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TweetData) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Text}

		return w

	case 2:
		w := types.String{Target: &r.Lang}

		return w

	case 3:
		w := types.String{Target: &r.Created_at}

		return w

	}
	panic("Unknown field index")
}

func (r *TweetData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TweetData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TweetData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TweetData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TweetData) HintSize(int)                     { panic("Unsupported operation") }
func (_ TweetData) Finalize()                        {}

func (_ TweetData) AvroCRC64Fingerprint() []byte {
	return []byte(TweetDataAvroCRC64Fingerprint)
}

func (r TweetData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["text"], err = json.Marshal(r.Text)
	if err != nil {
		return nil, err
	}
	output["lang"], err = json.Marshal(r.Lang)
	if err != nil {
		return nil, err
	}
	output["created_at"], err = json.Marshal(r.Created_at)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TweetData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["text"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Text); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for text")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lang"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lang); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lang")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_at"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_at); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_at")
	}
	return nil
}
