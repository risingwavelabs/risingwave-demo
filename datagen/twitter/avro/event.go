// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     avro.json
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Event struct {
	Data TweetData `json:"data"`

	Author User `json:"author"`
}

const EventAvroCRC64Fingerprint = "Y\xad\xffP?\xcc\xcb\xda"

func NewEvent() Event {
	r := Event{}
	r.Data = NewTweetData()

	r.Author = NewUser()

	return r
}

func DeserializeEvent(r io.Reader) (Event, error) {
	t := NewEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEventFromSchema(r io.Reader, schema string) (Event, error) {
	t := NewEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEvent(r Event, w io.Writer) error {
	var err error
	err = writeTweetData(r.Data, w)
	if err != nil {
		return err
	}
	err = writeUser(r.Author, w)
	if err != nil {
		return err
	}
	return err
}

func (r Event) Serialize(w io.Writer) error {
	return writeEvent(r, w)
}

func (r Event) Schema() string {
	return "{\"fields\":[{\"name\":\"data\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"lang\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":\"string\"}],\"name\":\"TweetData\",\"type\":\"record\"}},{\"name\":\"author\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":\"string\"},{\"name\":\"followers\",\"type\":\"long\"}],\"name\":\"User\",\"type\":\"record\"}}],\"name\":\"Event\",\"type\":\"record\"}"
}

func (r Event) SchemaName() string {
	return "Event"
}

func (_ Event) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Event) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Event) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Event) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Event) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Event) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Event) SetString(v string)   { panic("Unsupported operation") }
func (_ Event) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Event) Get(i int) types.Field {
	switch i {
	case 0:
		r.Data = NewTweetData()

		w := types.Record{Target: &r.Data}

		return w

	case 1:
		r.Author = NewUser()

		w := types.Record{Target: &r.Author}

		return w

	}
	panic("Unknown field index")
}

func (r *Event) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Event) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Event) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Event) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Event) HintSize(int)                     { panic("Unsupported operation") }
func (_ Event) Finalize()                        {}

func (_ Event) AvroCRC64Fingerprint() []byte {
	return []byte(EventAvroCRC64Fingerprint)
}

func (r Event) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	output["author"], err = json.Marshal(r.Author)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Event) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for data")
	}
	val = func() json.RawMessage {
		if v, ok := fields["author"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Author); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for author")
	}
	return nil
}
